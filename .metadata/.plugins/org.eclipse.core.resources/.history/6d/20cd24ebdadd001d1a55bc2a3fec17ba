package com.safeinvest.empDAO;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.safeinvest.empData.Employee;

@Repository
public class EmpRepositoryImpl implements EmpRepository {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	private static final String CREATE_TABLE_QUERY = "CREATE TABLE IF NOT EXISTS employee_master ( emp_code int NOT NULL,"
			+ "emp_firstname varchar(100) DEFAULT NULL," + "emp_middlename varchar(100) DEFAULT NULL,"
			+ "emp_lastname varchar(100) DEFAULT NULL," + "emp_mobile_no varchar(20) DEFAULT NULL,"
			+ "emp_phone_no varchar(20) DEFAULT NULL," + "emp_email_id varchar(45) DEFAULT NULL,"
			+ "emp_address varchar(250) DEFAULT NULL," + "emp_city varchar(45) DEFAULT NULL,"
			+ "emp_state varchar(45) DEFAULT NULL," + "emp_country varchar(30) DEFAULT NULL,"
			+ "PRIMARY KEY (emp_code)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci";

	private static final String SELECT_ALL_EMPLOYEES = "SELECT * FROM employee_db.employee_master";

	private static final String INSERT_EMPLOYEE_DATA = "INSERT INTO employee_db.employee_master "
			+ "(emp_code, emp_firstname, emp_middlename, emp_lastname, emp_mobile_no, "
			+ "emp_phone_no, emp_email_id, emp_address, emp_city, emp_state, emp_country) "
			+ "VALUES(?,?,?,?,?,?,?,?,?,?,?)";

	private static final String UPDATE_EMPLOYEE_DETAIL = "UPDATE employee_db.employee_master SET emp_firstname=?, "
			+ "emp_middlename=?, emp_lastname=?, emp_mobile_no=?,emp_phone_no=?, emp_email_id=?,"
			+ " emp_address=?, emp_city=?, emp_state=?, emp_country=? WHERE emp_code=?";

	private static final String DELETE_EMPLOYEE_DATA = "DELETE FROM employee_db.employee_master where emp_code=?";

	private static final String SELECT_EMPLOYEE_BY_EMP_CODE = "SELECT * FROM employee_db.employee_master where emp_code=?";

	public int createTable() {
		int update = this.jdbcTemplate.update(CREATE_TABLE_QUERY);
		return update;
	}

	@Override
	public Employee saveEmployees(Employee empdetails) {
		
		if(empdetails.getEmp_mobile_no().length()<10 || empdetails.getEmp_mobile_no().length()>10 || empdetails.getEmp_phone_no().length()>10 || empdetails.getEmp_phone_no().length()<10) {
			System.out.println( "Please enter 10 digit mobile no");
		}else if(empdetails.getEmp_code()==empdetails.getEmp_code()){
			System.out.println( "Please enter new emp code");
		}		else {
			jdbcTemplate.update(INSERT_EMPLOYEE_DATA, empdetails.getEmp_code(), empdetails.getEmp_firstname(),
					empdetails.getEmp_middlename(), empdetails.getEmp_lastname(), empdetails.getEmp_mobile_no(),
					empdetails.getEmp_phone_no(), empdetails.getEmp_email_id(), empdetails.getEmp_address(),
					empdetails.getEmp_city(), empdetails.getEmp_state(), empdetails.getEmp_country());
		}
		return empdetails;
	}

	@Override
	public Employee updateEmployees(Employee empdetails) {
		jdbcTemplate.update(UPDATE_EMPLOYEE_DETAIL, empdetails.getEmp_firstname(), empdetails.getEmp_middlename(),
				empdetails.getEmp_lastname(), empdetails.getEmp_mobile_no(), empdetails.getEmp_phone_no(),
				empdetails.getEmp_email_id(), empdetails.getEmp_address(), empdetails.getEmp_city(),
				empdetails.getEmp_state(), empdetails.getEmp_country(), empdetails.getEmp_code());
		return empdetails;
	}

	@Override
	public Employee getEmployeeByID(int empcode) {
		Employee empdetails = jdbcTemplate.queryForObject(SELECT_EMPLOYEE_BY_EMP_CODE,
				BeanPropertyRowMapper.newInstance(Employee.class), empcode);
		if (empdetails != null) {
			return empdetails;
		} else {
			return null;
		}
	}

	@Override
	public List<Employee> getAllEmployeesDetails() {
		return this.jdbcTemplate.query(SELECT_ALL_EMPLOYEES, BeanPropertyRowMapper.newInstance(Employee.class));
	}

	@Override
	public int deleteEmployeeById(int empcode) {
		return jdbcTemplate.update(DELETE_EMPLOYEE_DATA, empcode);
	}

}
